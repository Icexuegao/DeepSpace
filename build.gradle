apply plugin: "java"
buildscript {
    //项目的仓库
    ext {
        uncVersion='2.1.1'
        kotlin_version = "1.9.23"
        proUser = System.getProperty("user.name")
        sdkRoot = System.getenv("ANDROID_HOME")
    }
}
repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
    maven { url 'https://repo.huaweicloud.com/repository/maven/' }
    google()
    maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url 'https://jitpack.io' }
}
dependencies {
  //  implementation  "com.alibaba:fastjson:2.0.28"
    compileOnly "com.github.EB-wilson.UniverseCore:core:$uncVersion"//涵盖了大部分mod制作相关的工具
    compileOnly "com.github.EB-wilson.UniverseCore:annotations:$uncVersion"//包括组件
    implementation "com.github.Anuken:jabel:93fde537c7"
    compileOnly "com.github.Tinylake:MindustryX:v146.004"
    compileOnly "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
}
tasks.register('allfg') {
    FileInputStream fis = new FileInputStream(new File("test.txt"))
    byte[] byt = new byte[10]
    int g = fis.read(byt, 0, byt.length)
    fis.close()
    if (g < 5) {
        FileOutputStream i = new FileOutputStream(new File("test.txt"), true)
        i.write(1)
        i.close()
    } else {
        FileOutputStream i = new FileOutputStream(new File("test.txt"), false)
        i.write(1)
        i.close()
    }
}
tasks.register('DeepSpaceJar', Jar) {
    dependsOn allfg
    DeepSpaceJar.dependsOn(project("javaSrc").getTasks().named("jar"))
//解决相同java识别文件报错
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.name}Desktops.jar"
    from {
        [zipTree("javaSrc\\build\\libs\\javaSrcDesktop.jar")]
    }
}
tasks.register('MYCOPYJAR',Copy){
    dependsOn DeepSpaceJar
    from "build/libs/$project.name" + "Desktops.jar"//源
    into {
        "C:/Users/$proUser/AppData/Roaming/Mindustry/mods"
    }
}
tasks.register('jarAndroid') {
    dependsOn DeepSpaceJar
    doLast {
        if (!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. ANDROID_HOME")

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

        if (!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() +
                [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "$sdkRoot/build-tools/34.0.0/d8.bat $dependencies --min-api 26 --output ${project.name}Android.jar ${project.name}Desktops.jar"
                .execute(null, new File("build/libs")).waitForProcessOutput(System.out, System.err)
    }
}


tasks.register('deploy', Jar) {
    jarAndroid.dependsOn DeepSpaceJar
    deploy.dependsOn(DeepSpaceJar)
    deploy.dependsOn(jarAndroid)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.name}.jar"//存档文件名
    from {
        [zipTree("build/libs/${project.name}Desktops.jar"),
         zipTree("build/libs/${project.name}Android.jar")]
    }
    from("assets") {
        include "**"
    }
    from(rootDir) {
        include "README.md"
    }
    doLast {
        delete {
            delete "build/libs/${project.name}Desktops.jar"
            delete "build/libs/${project.name}Android.jar"
        }
    }
}

tasks.register("MYCOPY", Copy) {
    dependsOn deploy
    from "build/libs/$project.name" + ".jar"//源
    into {
        "C:/Users/$proUser/AppData/Roaming/Mindustry/mods"
    }
}
/* manifest {
        attributes('Main-Class': 'scalasrc\\IceScala\\ScalaLoad')
    }*/
/*manifest {
    attributes('Main-Class': 'com.example.backendapp.BackendAppApplication')
}*/
/* from(rootDir) {
       include "mod.hjson"
   }*/
/*from("assets\\mod.hjson") {
    include "mod.hjson"
}
from("assets/") {
    include "**"
}*/
//from layout.projectDirectory.files("build\\classes\\scala\\main")

/*
tasks.register('deploy', Jar) {
    dependsOn jarAndroid
    dependsOn jar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.name}.jar"

    from { [zipTree("$buildSrc/libs/${project.name}Desktop.jar"), zipTree("$buildSrc/libs/${project.archivesBaseName}Android.jar")] }

    doLast {
        delete {
            delete "$buildSrc/libs/${project.name}Desktop.jar"
            delete "$buildSrc/libs/${project.name}Android.jar"
        }
    }
}*/
